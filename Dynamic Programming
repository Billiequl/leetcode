Find relationship between current value and previous values.For example, dp[t]=dp[t-1]+dp[t-2]

Coin Change
https://leetcode.com/problems/coin-change/description/

Solution:
dp[amount]=min(dp[amount-(coin in coins)])

Code:
    def coinChange(self, coins, amount):
        if amount==0:return 0
        dp=[amount+1]*(amount+1)
        dp[0]=0

        for i in range(amount+1):
            for j in coins:
                if i>=j:
                    if(dp[i-j]==amount+1):continue
                    dp[i]=min(dp[i],1+dp[i-j])
        return dp[-1] if dp[-1]<amount+1 else -1


1143. Longest Common Subsequence
https://leetcode.com/problems/longest-common-subsequence/description/
Solution:
DP[i][j] represents the longest common subsequence of text1[0 ... i] & text2[0 ... j].
DP[i][j] = DP[i - 1][j - 1] + 1 , if text1[i] == text2[j] DP[i][j] = max(DP[i - 1][j], DP[i][j - 1]) , otherwise
Code:
   def longestCommonSubsequence(self, text1, text2):
       
        l1 = len(text1)
        l2 = len(text2)
        dp = [[0 for j in range(l2+1)] for i in range(l1+1)]
        #dp = [[0]*(l2+1)]*(l1+1)  cannot use this 
        for i in range(1,l1+1):
            for j in range(1,l2+1):
                if text1[i-1] == text2[j-1]:
                    dp[i][j] = dp[i-1][j-1] + 1
                else:
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])

        return dp[l1][l2]
